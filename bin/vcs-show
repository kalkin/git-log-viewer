#!/bin/bash
# vcs -show - Show a commit beautifully.
# |
# | Description:
# |   When the given commit is a merge then the merged branch log is displayed
# |   is injected between stats and diff
# |
# | Usage:
# |   vcs show STH

if [ -t 1 ] || [ "$COLOR" -eq 1 ]; then
	colors="--color=always"
else
	colors="--color=never"
fi

USAGE() {
	head -n2 "$0" | tail -n1 | tr -d '#'
	grep "^# |" "$0" | sed "s/^# | \\?//"
}

[ $# -ne 1 ] && USAGE >/dev/stderr && exit 1
ID="$1"

DONE=""

show-children() {
	if [ "$DONE" != 1 ]; then # this is a guard that this is called once
		local DATA UNTIL
		[ $# -ne 1 ] && echo "Expected one argument" >/dev/stderr && exit 1

		DATA=$(git rev-list --parents -n1 "$1")
		IFS=" " read -r -a DATA_ARR <<<"$DATA"
		if [ ${#DATA_ARR[@]} -le 2 ]; then
			true
		else
			UNTIL=$(git merge-base "${DATA_ARR[1]}" "${DATA_ARR[2]}")
			if [ -n "$UNTIL" ]; then
				git --no-pager log "$colors" --graph --oneline "$UNTIL..${DATA_ARR[2]}" | sed 's/^/  /g'
			else
				git --no-pager log "$colors" --graph --oneline "${DATA_ARR[2]}" | sed 's/^/  /g'
			fi
			DONE=1
			echo
		fi
	fi
}

result1=$(git show -m --color-moved-ws=ignore-space-change --root --stat --use-mailmap \
	"$colors" --pretty=fuller "$ID" |
	while read -r line; do
		if echo "$line" | grep -q 'diff --git '; then
			show-children "$ID"
		fi
		echo "$line" || exit 32
	done)

result2=$(git diff --patience --color=always -w "$ID"^1.."$ID")
printf "%s\n%s" "$result1" "$result2" | LESS="-R" "$PAGER"
